
    // word count
    get_time( begin );
// typedef generated by compiler, see above
// typedef generated by compiler, see above
// typedef generated by compiler, see above
// typedef generated by compiler, see above
    size_t num_files = dir_list.size();
    std::vector<WORD_TYPE> catalog;
    catalog.resize( num_files );

    asap::word_container_reducer<word_map_type2> allwords;
    cilk_for( size_t i=0; i < num_files; ++i ) {
	std::string filename = *std::next(dir_list.cbegin(),i);
	// std::cerr << "Read file " << filename;

CATALOG_BUILD_CODE

	// std::cerr << ": " << catalog[i].size() << " words\n";
	// Reading from std::vector rather than std::map should be faster...
	// Validated: about 10% on word count, 20% on TF/IDF, 16 threads
	allwords.count_presence( catalog[i] );
    }
    get_time (end);
    print_time("word count", begin, end);

    get_time( begin );
// typedef generated by compiler, see above
    // TODO: consider linearising the word_map to a word_list with exchanged
    //       word_bank in order to avoid storing the ID? Problem: lookup
    //       during TF/IDF computation
    // TODO: infer word_map_type2 from word_map_type* in template definition?
    // TODO: construct aggregate word_map_type2 during wc loop above
    std::shared_ptr<word_map_type2> allwords_ptr
	= std::make_shared<word_map_type2>();
    allwords_ptr->swap( allwords.get_value() );

    std::shared_ptr<directory_listing_type> dir_list_ptr
	= std::make_shared<directory_listing_type>();
    dir_list_ptr->swap( dir_list );

    data_set_type tfidf
	= asap::tfidf<vector_type>(
	    catalog.cbegin(), catalog.cend(), allwords_ptr, dir_list_ptr );
    get_time (end);
    print_time("TF/IDF", begin, end);

