#!/bin/sh

##
##   This file extracts the relevant template sections from the asap operator codes to create the 
##   templates used for code generation by the asap workflow->cpp compiler
##   Based on regular expressions, so may break in some instances, but still should take a significant
##   amount of the work away in manually merging each time.
##
## Header section
##
# one version
pcregrep -M '^\#include <unistd.h>(.*\n)*?\#include <stddefines.h>' tfidf_list.cpp > templates/tfidfheader.template

##
## Main declarations code section
##

# Extract section (one verstion)
pcregrep -M '^int main(.*\n)*^\s*print_time\(\"init.*\n' tfidf_list.cpp > templates/tfidfmaindeclarations.template
# pcregrep -M '^int main(.*\n)*^\s*print_time\(\"init.*\n' tfidf_map.cpp > test.cpp

# tfidf_list, comment out parse_args
perl -i -0777 -pe 's/    parse_args/    \/\/ parse_args/g' templates/tfidfmaindeclarations.template

# tfidf_map, comment out parse_args
# perl -0777 -pe 's/    parse_args/    \/\/ parse_args/g' tfidf_map.cpp > test.cpp

##
## Input section
##

# Extract section (one version)
pcregrep -M '^\s*\/\/ Directory listing(.*\n)*\s*print_time\(\"directory listing.*\n' tfidf_list.cpp > templates/tfidfinput.template

perl -i -0777 -pe 's/\(\sindir/\( FILE_PARAM1/g' templates/tfidfinput.template

##
## Call sequence code section
##

# (one version, but extracts 2 versions of catalog build code)
pcregrep -M '^\s*\/\/ word count(.*\n)*^\s*print_time\(\"TF\/IDF.*\n' tfidf_list.cpp > templates/tfidf_callsequence.template

# Extract catalogbuild code to template, need 2 versions of this
pcregrep -M '^\s*\{\n.*\/\/ Build up catalog(.*\n)*?\s*\}' tfidf_list.cpp > templates/tfidf_word_list_type_catalogbuild.template
pcregrep -M '^.*\/\/ Build up catalog(.*\n)*?.*\;\n' tfidf_map.cpp > templates/tfidf_word_map_type_catalogbuild.template

# Repace catalogbuild code in main (callsequence) template with CATALOG_BUILD_CODE so the appropriate build template can be loaded
perl -i -0777 -pe 's/\s*\{\n\s*\/\/ Build up catalog(.*\n)*.*delete wmap/\n\nCATALOG_BUILD_CODE/' templates/tfidf_callsequence.template
# We should only need one or the other as combined template file for call sequence
# perl -i -0777 -pe 's/\s*\/\/ Build up catalog(.*\n){2}.*\;/\n\nCATALOG_BUILD_CODE/' tfidf_map.cpp > test.cpp

# tfidf_list
perl -i -0777 -pe 's/word_list_type/WORD_TYPE/g' templates/tfidf_callsequence.template

# tfidf_map
# perl -i -0777 -pe 's/word_map_type/WORD_TYPE/g' templates/tfidf_callsequence.template


##
## Output code section 
##

# Extract section
pcregrep -M '^\s*get_time\( begin \)\;\n\s*std\:\:ofstream(.*\n)*^\s*of\.close\(\)\;\n' tfidf_list.cpp > templates/tfidfoutput.template

# replace outfile
perl -i -0777 -pe 's/outfile/OUTFILE/g' templates/tfidfoutput.template

##
## Close main code section 
##

# Extract section
pcregrep -M '^\s*get_time \(end\)\;\n^\s*print_time\(\"output(.*\n)*\}$' tfidf_list.cpp > templates/tfidfmainclose.template

## Finally remove typedefs from callsequence and input sections as the materialised operators will generate these as per op lib rules
# perl -i -0777 -pe 's/^\typedef(.*\n)*\;/\/\/ typedef generated by compiler, see above /g' templates/tfidfinput.template
perl -i -0777 -pe 's/\s*typedef(\s|.)*?;/\n\/\/ typedef generated by compiler, see above/g' templates/tfidfinput.template
# perl -i -0777 -pe 's/^\typedef(.*\n)*\;/\/\/ typedef generated by compiler, see above /g' templates/tfidf_callsequence.template
perl -i -0777 -pe 's/\s*typedef(\s|.)*?;/\n\/\/ typedef generated by compiler, see above/g' templates/tfidf_callsequence.template



# Change, veryStart, headers and typedefs move
